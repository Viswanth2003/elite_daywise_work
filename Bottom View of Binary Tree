class Solution
{
	static void fun(Node root,TreeMap<Integer,Integer> map){
        Queue<Node> qu = new LinkedList<>();
        qu.offer(root);
		ArrayList<Integer> ofset = new ArrayList<>();
		ofset.add(0);
        while(!qu.isEmpty()){
            int size = qu.size();
            for(int i=0; i<size; i++){
                Node cur=qu.poll();
				int os = ofset.get(i);
				
				map.put(os,cur.data);
                if(cur.left!=null){
                    qu.offer(cur.left);
					ofset.add(os-1);
                }

                if(cur.right!=null){
                    qu.offer(cur.right);
					ofset.add(os+1);
                }
            }
            for(int i=0;i<size;i++){
				ofset.remove(0);
			}
        }
	}
    //Function to return a list containing the bottom view of the given tree.
    public ArrayList <Integer> bottomView(Node root)
    {
        // Code here
		ArrayList<Integer> list = new ArrayList<>();
		if(root==null) return list;
		TreeMap<Integer,Integer> map=new TreeMap<>(); 
		fun(root,map);
		 for (Map.Entry<Integer, Integer> entry : map.entrySet()){
			 list.add(entry.getValue());
		 }
		return list;
    }
}
