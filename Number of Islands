class Solution {
private void bfs(char[][] grid, boolean[][] vis, int row, int col){
        int rowarray[]={-1,0,1,0};
        int colarray[]={0,1,0,-1};
        
        int n = grid.length;
        int m = grid[0].length;
        
        Queue<Pair> q = new LinkedList<>();
        vis[row][col] = true;
        q.add(new Pair(row, col));
        
        while(!q.isEmpty()){
            Pair cur = q.poll();
            int r = (Integer)cur.getKey();
            int c = (Integer)cur.getValue();
            for (int k = 0; k < 4; k++) {
                int nRow = r + rowarray[k];
                int nCol = c + colarray[k];
                        
                if(nRow >= 0 && nRow < n && nCol >= 0 && nCol < m 
                       && !vis[nRow][nCol] && grid[nRow][nCol] == '1'){
                        
                    vis[nRow][nCol] = true;
                    q.add(new Pair(nRow, nCol));
                }
            }
        }
    }
     public int numIslands(char[][] grid) {
        
        int n = grid.length;
        int m = grid[0].length;
        
        boolean[][] vis = new boolean[n][m];
        for(int row = 0; row < n; row++){
            for(int col = 0; col < m; col++){
                vis[row][col]=false;
            }
        }
        int cnt = 0;
        
        for(int row = 0; row < n; row++){
            for(int col = 0; col < m; col++){
                if(!vis[row][col] && grid[row][col] == '1'){
                    bfs(grid, vis, row, col);
                    cnt++;
                }
            }
        }
        
        return cnt;
    }
    
    
}
